package main

/*
189. 旋转数组
难度: 简单
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
示例 1:
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]

示例 2:
输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释:
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:
尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。
*/

// k%len的元素会放到数组头部，且是反转过来的，其他元素只需要向后平移即可
// 步骤1: 反转整个数组
// 步骤2: 反转前面k个元素
// 步骤3: 反转k之后的元素
// 简单示例:
// 1,2,3,4 [n = 4, K = 2]
// 4,3,2,1
// 4,3,2,1
// 4,3,1,2

func rotate(nums []int, k int) {
	if len(nums) == 0 || k == 0 {
		return
	}
	k %= len(nums)
	// 反转整个数组
	reverse(0, len(nums)-1, nums)
	// 反转前面k个元素
	reverse(0, k-1, nums)
	// 反转k之后的元素
	reverse(k, len(nums)-1, nums)
}

// 反转数组
func reverse(start, end int, nums []int) {
	for start < end {
		tmp := nums[start]
		nums[start] = nums[end]
		nums[end] = tmp
		start++
		end--
	}
}
